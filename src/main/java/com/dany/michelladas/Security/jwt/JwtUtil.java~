package com.dany.michelladas.Security.jwt;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import java.security.Key;
import java.util.Date;

/**
 * Clase responsable de la generación y validación de tokens JWT.
 *
 * JWT (JSON Web Token) se utiliza para autenticar usuarios de forma segura y sin mantener sesiones en el servidor.
 * Esta clase permite:
 * - Generar un token al momento del login.
 * - Validar si un token es correcto y no ha expirado.
 * - Extraer el email (username) del usuario desde el token.
 * @author Dan
 * @version 1.0
 */
@Component
public class JwtUtil {

    /**
     * Clave secreta utilizada para firmar los tokens.
     * Se configura en application.properties: jwt.secret
     */
    @Value("${jwt.secret}")
    private String jwtSecret;

    /**
     * Tiempo de expiración del token en milisegundos.
     * Se configura en application.properties: jwt.expiration
     */
    @Value("${jwt.expiration}")
    private Long jwtExpirationMs;

    /**
     * Genera un token JWT válido para el nombre de usuario (email).
     *
     * @param username Email del usuario autenticado
     * @return Token JWT firmado
     */
    public String generateToken(String username) {
        Date now = new Date();
        Date expiryDate = new Date(now.getTime() + jwtExpirationMs);

        Key key = Keys.hmacShaKeyFor(jwtSecret.getBytes());

        return Jwts.builder()
                .setSubject(username)             // El email del usuario
                .setIssuedAt(now)                 // Fecha de creación
                .setExpiration(expiryDate)        // Fecha de expiración
                .signWith(key, SignatureAlgorithm.HS256) // Firma con clave secreta
                .compact();
    }

    /**
     * Extrae el nombre de usuario (email) desde un token JWT.
     *
     * @param token Token JWT recibido
     * @return Email del usuario
     */
    public String getUsernameFromToken(String token) {
        Key key = Keys.hmacShaKeyFor(jwtSecret.getBytes());

        return Jwts.parserBuilder()
                .setSigningKey(key)
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    /**
     * Verifica si el token JWT es válido (firma correcta, no expirado).
     *
     * @param token Token a validar
     * @return true si es válido, false si está alterado o expirado
     */
    public boolean validateToken(String token) {
        try {
            Key key = Keys.hmacShaKeyFor(jwtSecret.getBytes());

            Jwts.parserBuilder()
                    .setSigningKey(key)
                    .build()
                    .parseClaimsJws(token);
            return true;

        } catch (JwtException | IllegalArgumentException e) {
            System.err.println("Token inválido o expirado: " + e.getMessage());
            return false;
        }
    }
}



